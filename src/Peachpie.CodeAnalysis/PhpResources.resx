<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IDS_Donate" xml:space="preserve">
    <value>Donate to support the development of PeachPie! https://bit.ly/3pfXw2q</value>
  </data>
  <data name="IDS_Help" xml:space="preserve">
    <value>
                            PeachPie PHP Compiler Options
                            
                    - OUTPUT FILES -
/out:&lt;file&gt;                 Specify output file name (default: base name of
                            file with main class or first file)
/target:exe                 Build a console executable (default) (Short
                            form: /t:exe)
/target:winexe              Build a Windows executable (Short form:
                            /t:winexe)
/target:library             Build a library (Short form: /t:library)
/target:module              Build a module that can be added to another
                            assembly (Short form: /t:module)
/target:appcontainerexe     Build an Appcontainer executable (Short form:
                            /t:appcontainerexe)
/doc:&lt;file&gt;                 XML Documentation file to generate

                     - INPUT FILES -                        
/reference:&lt;file list&gt;      Reference metadata from the specified assembly
                            files (Short form: /r)
&lt;file&gt;                      Source file to be compiled
&lt;wildcards&gt;                 Pattern matching files to be compiled

                    - CODE GENERATION -
/debug[+|-]                 Emit debugging information
/debug:{full|pdbonly|portable|embedded}
                            Specify debugging type ('full' is default,
                            'portable' is a cross-platform format,
                            'embedded' is a cross-platform format embedded into
                            the target .dll or .exe)
/optimize[+|-]              Enable optimizations (Short form: /o)

                     - ERRORS AND WARNINGS -
/nowarn:&lt;warn list&gt;         Disable specific warning messages

                    - LANGUAGE -
/langversion:&lt;string&gt;       Specify language version such as
                            `default` (latest major version)
                            or specific versions like `5.6.` or `7.0`
/shortopentag[+|-]          Whether to enable PHP short open tag syntax (&lt;?).
                            Disabled by default.
/phpdoctypes:&lt;string&gt;       Specifies what PHPDoc is used for strict type
                            information. Possible values are:
                            None, FieldTypes, ParameterTypes, ReturnTypes, All
                            or their combination using vertical bar |.
/phpdoctypes[+|-]           Shortcut for /phpdoctypes:All or /phpdoctypes:None.

                    - SECURITY -
/delaysign[+|-]             Delay-sign the assembly using only the public
                            portion of the strong name key
/publicsign[+|-]            Public-sign the assembly using only the public
                            portion of the strong name key
/keyfile:&lt;file&gt;             Specify a strong name key file
/keycontainer:&lt;string&gt;      Specify a strong name key container
 
                    - MISCELLANEOUS -
@&lt;file&gt;                     Read response file for more options
/help                       Display this usage message (Short form: /?)
/nologo                     Suppress compiler copyright message
/parallel[+|-]              Concurrent build.

                    - ADVANCED -
/main:&lt;type&gt;                Specify the script file, class or function
                            representing the entry point (Short form: /m)
/pdb:&lt;file&gt;                 Specify debug information file name (default:
                            output file name with .pdb extension)
/modulename:&lt;string&gt;        Specify the name of the source module
/define:&lt;name&gt;=&lt;value&gt;      Defines compile-time constant. (Short form: /d)
/version:&lt;value&gt;            Specifies the assembly version string. (Short form: /v)</value>
  </data>
  <data name="IDS_LangVersions" xml:space="preserve">
    <value>Language versions:</value>
  </data>
  <data name="IDS_Logo" xml:space="preserve">
    <value>{0} version {1}</value>
  </data>
  <data name="IDS_ToolName" xml:space="preserve">
    <value>PeachPie PHP Compiler</value>
  </data>
  <data name="XmlDoc_FieldsOnlyCtor" xml:space="preserve">
    <value>Initializes the class without calling its '__construct' method.</value>
  </data>
</root>