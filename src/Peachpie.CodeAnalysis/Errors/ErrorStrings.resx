<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERR_CannotInstantiateType" xml:space="preserve">
    <value>Cannot instantiate {0} {1}</value>
  </data>
  <data name="ERR_CircularBase" xml:space="preserve">
    <value>Circular base class dependency involving '{0}' and '{1}'</value>
  </data>
  <data name="ERR_ErrorOpeningAssemblyFile" xml:space="preserve">
    <value>Error opening assembly file '{0}': {1}</value>
  </data>
  <data name="ERR_MetadataFileNotFound" xml:space="preserve">
    <value>Metadata file '{0}' could not be found</value>
  </data>
  <data name="ERR_MethodCalledOnNonObject" xml:space="preserve">
    <value>Call to a member function {0}() on {1}</value>
  </data>
  <data name="ERR_NotYetImplemented" xml:space="preserve">
    <value>{0} is currently not supported by PeachPie.</value>
  </data>
  <data name="ERR_PositionalArgAfterUnpacking" xml:space="preserve">
    <value>Cannot use positional argument after argument unpacking</value>
  </data>
  <data name="ERR_StartupObjectNotFound" xml:space="preserve">
    <value>Startup object matching '{0}' could not be resolved</value>
  </data>
  <data name="ERR_TypeNameCannotBeResolved" xml:space="preserve">
    <value>Type name '{0}' could not be resolved.</value>
  </data>
  <data name="ERR_UnknownTypeDependencies" xml:space="preserve">
    <value>Type '{0}' cannot be declared.</value>
  </data>
  <data name="ERR_ValueOfTypeCannotBeAliased" xml:space="preserve">
    <value>Value of type '{0}' cannot be passed by reference</value>
  </data>
  <data name="WRN_AmbiguousDeclaration" xml:space="preserve">
    <value>The declaration of '{0}' is ambiguous resulting in multiple versions to be compiled. Fix this issue by ensuring every base type is declared just once unconditionally.</value>
  </data>
  <data name="INF_EvalDiscouraged" xml:space="preserve">
    <value>Use of 'eval()' is discouraged. Construct allows execution of arbitrary code and is subject to performance and memory overhead.</value>
  </data>
  <data name="WRN_NoSourceFiles" xml:space="preserve">
    <value>No source files specified</value>
  </data>
  <data name="WRN_NotYetImplementedIgnored" xml:space="preserve">
    <value>{0} will be ignored, because it is currently not supported by Peachpie.</value>
  </data>
  <data name="WRN_UndefinedFunctionCall" xml:space="preserve">
    <value>Call to undefined function: '{0}'</value>
  </data>
  <data name="WRN_UndefinedMethodCall" xml:space="preserve">
    <value>Call to undefined method: {0}::{1}()</value>
  </data>
  <data name="WRN_UndefinedType" xml:space="preserve">
    <value>Class '{0}' not found</value>
  </data>
  <data name="WRN_UninitializedVariableUse" xml:space="preserve">
    <value>Undefined variable: ${0}</value>
  </data>
  <data name="WRN_UnreachableCode" xml:space="preserve">
    <value>Unreachable code detected</value>
  </data>
  <data name="ERR_FileNotFound" xml:space="preserve">
    <value>Source file '{0}' could not be found.</value>
  </data>
  <data name="ERR_BadSwitch" xml:space="preserve">
    <value>Unrecognized option: '{0}'</value>
  </data>
  <data name="WRN_StringAssertionDeprecated" xml:space="preserve">
    <value>Using string as the assertion is deprecated</value>
  </data>
  <data name="WRN_AssertAlwaysFail" xml:space="preserve">
    <value>Assertion will always fail</value>
  </data>
  <data name="WRN_MissingArguments" xml:space="preserve">
    <value>{0}() expects at least {1} parameter(s), {2} given</value>
  </data>
  <data name="WRN_TooManyArguments" xml:space="preserve">
    <value>{0}() expects {1} parameter(s), {2} given</value>
  </data>
  <data name="ERR_CannotExtendFrom" xml:space="preserve">
    <value>Class {0} cannot extend from {1} {2}</value>
  </data>
  <data name="ERR_CannotImplementNonInterface" xml:space="preserve">
    <value>{0} cannot implement {1} - it is not an interface</value>
  </data>
  <data name="ERR_CannotUseNonTrait" xml:space="preserve">
    <value>{0} cannot use {1} - it is not a trait</value>
  </data>
  <data name="WRN_ToStringMustReturnString" xml:space="preserve">
    <value>Method {0}::__toString() must return a string value</value>
  </data>
  <data name="ERR_CannotDeclareReturnType" xml:space="preserve">
    <value>{0}() cannot declare a return type</value>
  </data>
  <data name="ERR_VoidFunctionCannotReturnValue" xml:space="preserve">
    <value>A void function must not return a value</value>
  </data>
  <data name="ERR_MustTakeArgs" xml:space="preserve">
    <value>{0} {1}() must take exactly {2} arguments</value>
  </data>
  <data name="ERR_InvalidFunctionName" xml:space="preserve">
    <value>Function name must be a string, {0} given</value>
  </data>
  <data name="ERR_FinalAbstractClassDeclared" xml:space="preserve">
    <value>Cannot use the final modifier on an abstract class</value>
  </data>
  <data name="ERR_PropertyAccessibilityError" xml:space="preserve">
    <value>Access level to {0}::${1} must be {2} (as in class {3}) or weaker</value>
  </data>
  <data name="ERR_PrimitiveTypeNameMisused" xml:space="preserve">
    <value>Use of primitive type '{0}' is misused</value>
  </data>
  <data name="ERR_SwitchNeedsValue" xml:space="preserve">
    <value>Missing value for '{0}' option</value>
  </data>
  <data name="ERR_TooManyUserStrings" xml:space="preserve">
    <value>Combined length of user strings used by the program exceeds allowed limit. Try to decrease use of string literals.</value>
  </data>
  <data name="WRN_SymbolDeprecated" xml:space="preserve">
    <value>Deprecated: {0} '{1}' has been deprecated. {2}</value>
  </data>
  <data name="ERR_OutputWriteFailed" xml:space="preserve">
    <value>Could not write to output file '{0}' -- '{1}'</value>
  </data>
  <data name="ERR_NeedsLoopOrSwitch" xml:space="preserve">
    <value>'{0}' not in the 'loop' or 'switch' context</value>
    <comment>When using break; or continue; outside switch or loop.</comment>
  </data>
  <data name="WRN_ExpressionNotRead" xml:space="preserve">
    <value>The expression is not being read. Did you mean to assign it somewhere?</value>
    <comment>e.g. an array is created but not used</comment>
  </data>
  <data name="WRN_AssigningSameVariable" xml:space="preserve">
    <value>Assignment made to same variable; did you mean to assign something else?</value>
  </data>
  <data name="ERR_BadAssemblyName" xml:space="preserve">
    <value>Invalid assembly name: {0}</value>
  </data>
  <data name="ERR_BadDocumentationMode" xml:space="preserve">
    <value>Provided documentation mode is unsupported or invalid: '{0}'.</value>
  </data>
  <data name="ERR_BadSourceCodeKind" xml:space="preserve">
    <value>Provided source code kind is unsupported or invalid: '{0}'</value>
  </data>
  <data name="ERR_EncodinglessSyntaxTree" xml:space="preserve">
    <value>Cannot emit debug information for a source text without encoding.</value>
  </data>
  <data name="ERR_EncUpdateFailedMissingAttribute" xml:space="preserve">
    <value>Cannot update '{0}'; attribute '{1}' is missing.</value>
  </data>
  <data name="ERR_InvalidDebugInfo" xml:space="preserve">
    <value>Unable to read debug information of method '{0}' (token 0x{1:X8}) from assembly '{2}'</value>
  </data>
  <data name="ERR_InvalidHashAlgorithmName" xml:space="preserve">
    <value>Invalid hash algorithm name: '{0}'</value>
  </data>
  <data name="ERR_InvalidInstrumentationKind" xml:space="preserve">
    <value>Invalid instrumentation kind: {0}</value>
  </data>
  <data name="ERR_ModuleEmitFailure" xml:space="preserve">
    <value>Failed to emit module '{0}'.</value>
  </data>
  <data name="ERR_MutuallyExclusiveOptions" xml:space="preserve">
    <value>Compilation options '{0}' and '{1}' can't both be specified at the same time.</value>
  </data>
  <data name="ERR_OptionMustBeAbsolutePath" xml:space="preserve">
    <value>Option '{0}' must be an absolute path.</value>
  </data>
  <data name="ERR_PeWritingFailure" xml:space="preserve">
    <value>An error occurred while writing the output file: {0}.</value>
  </data>
  <data name="FTL_InvalidInputFileName" xml:space="preserve">
    <value>File name '{0}' is empty, contains invalid characters, has a drive specification without an absolute path, or is too long</value>
  </data>
  <data name="ERR_CannotEmbedWithoutPdb" xml:space="preserve">
    <value>/embed switch is only supported when emitting Portable PDB (/debug:portable or /debug:embedded).</value>
  </data>
  <data name="ERR_NoMatchingOverload" xml:space="preserve">
    <value>No overload for method {0} can be called.</value>
  </data>
  <data name="INF_RedundantCast" xml:space="preserve">
    <value>Cast is redundant.</value>
  </data>
  <data name="WRN_DuplicateArrayKey" xml:space="preserve">
    <value>Duplicate array key: '{0}'.</value>
  </data>
  <data name="WRN_InvalidArrayKeyType" xml:space="preserve">
    <value>Invalid array key type: {0}.</value>
  </data>
  <data name="WRN_CloneNonObject" xml:space="preserve">
    <value>Cloning of non-object: {0}.</value>
  </data>
  <data name="INF_TypeNameCaseMismatch" xml:space="preserve">
    <value>Name '{0}' does not match the expected name '{1}', letter casing mismatch.</value>
  </data>
  <data name="WRN_ForeachNonIterable" xml:space="preserve">
    <value>Using non-iterable type in foreach: {0}.</value>
  </data>
  <data name="WRN_FormatStringWrongArgCount" xml:space="preserve">
    <value>Call to '{0}()' expects {1} argument(s), {2} given.</value>
    <comment>Call to printf or sprintf has wrong arguments count according to its format specifiers.</comment>
  </data>
  <data name="WRN_ParentCtorNotCalled" xml:space="preserve">
    <value>Missing the call of parent::__construct from {0}::__construct.</value>
  </data>
  <data name="WRN_ParamPhpDocTypeHintIncompatible" xml:space="preserve">
    <value>PHPDoc type '{0}' of parameter ${1} is incompatible with its type hint '{2}'.</value>
  </data>
  <data name="WRN_FieldPhpDocAssignIncompatible" xml:space="preserve">
    <value>Value of type {0} assigned to field {1} is incompatible with its PHPDoc type {2}.</value>
  </data>
  <data name="ERR_CannotAssignToThis" xml:space="preserve">
    <value>Cannot re-assign $this</value>
  </data>
  <data name="AutoloadDeprecatedMessage" xml:space="preserve">
    <value>Use spl_autoload_register() instead.</value>
  </data>
  <data name="ERR_ResourceNotUnique" xml:space="preserve">
    <value>Resource identifier '{0}' has already been used in this assembly</value>
  </data>
  <data name="INF_DestructDiscouraged" xml:space="preserve">
    <value>Use of '__destruct' is discouraged. Garbage collection behavior is a subject to change.</value>
  </data>
  <data name="ERR_DefaultParameterValueTypeMismatch" xml:space="preserve">
    <value>Default value for parameter ${0} with a {1} type can only be {1} or NULL, {2} type given</value>
  </data>
  <data name="ERR_InvalidConstantExpression" xml:space="preserve">
    <value>Constant expression contains invalid operations</value>
    <comment>field or parameter initializer contains invalid expression</comment>
  </data>
  <data name="ERR_ThisOutOfObjectContext" xml:space="preserve">
    <value>Using $this when not in object context</value>
  </data>
  <data name="FTL_BadCodepage" xml:space="preserve">
    <value>Code page '{0}' is invalid or not installed</value>
  </data>
  <data name="ERR_ReadOnlyPropertyWritten" xml:space="preserve">
    <value>Cannot set read-only property {0}::${1}</value>
  </data>
  <data name="ERR_CantReadResource" xml:space="preserve">
    <value>Error reading resource '{0}' -- '{1}'</value>
  </data>
  <data name="ERR_VariadicParameterNotLast" xml:space="preserve">
    <value>Only the last parameter can be variadic</value>
  </data>
  <data name="WRN_ArgumentVoid" xml:space="preserve">
    <value>Argument has no value, parameter will be always NULL</value>
  </data>
  <data name="ERR_BadCompilationOptionValue" xml:space="preserve">
    <value>Invalid '{0}' value: '{1}'.</value>
  </data>
  <data name="ERR_CompileCancelled" xml:space="preserve">
    <value>Compilation cancelled by user</value>
  </data>
  <data name="INF_OverrideNameCaseMismatch" xml:space="preserve">
    <value>Overriden function name '{0}' does not match it's parent name '{1}', letter casing mismatch.</value>
  </data>
  <data name="ERR_NoSourceFile" xml:space="preserve">
    <value>Source file '{0}' could not be opened -- {1}</value>
  </data>
  <data name="WRN_PCRE_Pattern_Error" xml:space="preserve">
    <value>PCRE pattern parse error: {0} at offset {1}</value>
  </data>
  <data name="ERR_PdbWritingFailed" xml:space="preserve">
    <value>Failure writing debug information: {0}</value>
  </data>
  <data name="ERR_CantOpenFileWrite" xml:space="preserve">
    <value>Cannot open '{0}' for writing -- '{1}'</value>
  </data>
  <data name="WRN_TypeNameInUse" xml:space="preserve">
    <value>{0} '{1}' is already defined</value>
  </data>
  <data name="WRN_CannotIncludeFile" xml:space="preserve">
    <value>Script file '{0}' could not be resolved, the script inclusion is unbound.</value>
  </data>
  <data name="WRN_CalledFromGlobalScope" xml:space="preserve">
    <value>Called from the global scope</value>
  </data>
  <data name="ERR_CtorPropertyAbstractCtor" xml:space="preserve">
    <value>Cannot declare promoted property in an abstract constructor</value>
  </data>
  <data name="ERR_CtorPropertyNotCtor" xml:space="preserve">
    <value>Cannot declare promoted property outside a constructor</value>
  </data>
  <data name="ERR_CtorPropertyStaticCtor" xml:space="preserve">
    <value>Cannot declare promoted property in a static constructor</value>
  </data>
  <data name="ERR_CtorPropertyVariadic" xml:space="preserve">
    <value>Cannot declare variadic promoted property</value>
  </data>
  <data name="ERR_PropertyTypeNotAllowed" xml:space="preserve">
    <value>Property {0}::${1} cannot have type {2}</value>
  </data>
  <data name="ERR_MultipleAnalyzerConfigsInSameDir" xml:space="preserve">
    <value>Multiple analyzer config files cannot be in the same directory ('{0}').</value>
  </data>
  <data name="WRN_GeneratorFailedDuringGeneration" xml:space="preserve">
    <value>Generator '{0}' failed to generate source. It will not contribute to the output and compilation errors may occur as a result. Exception was of type '{1}' with message '{2}'</value>
  </data>
  <data name="WRN_GeneratorFailedDuringInitialization" xml:space="preserve">
    <value>Generator '{0}' failed to initialize. It will not contribute to the output and compilation errors may occur as a result. Exception was of type '{1}' with message '{2}'</value>
  </data>
  <data name="INF_ConstantAlreadyDefined" xml:space="preserve">
    <value>Constant '{0}' with the same name is already defined</value>
  </data>
  <data name="ERR_ArgumentTypeMismatch" xml:space="preserve">
    <value>Argument {0} passed to {1}() must be of the type {2}, {3} given</value>
  </data>
  <data name="ERR_TypeMismatch" xml:space="preserve">
    <value>Cannot convert {0} to {1}</value>
  </data>
  <data name="ERR_BinaryFile" xml:space="preserve">
    <value>'{0}' is a binary file instead of a text file</value>
  </data>
  <data name="ERR_NeverReturningFunctionCannotReturn" xml:space="preserve">
    <value>A never-returning function cannot return</value>
  </data>
  <data name="ERR_ParameterTypeNotAllowed" xml:space="preserve">
    <value>Parameter ${0} cannot have type {1}</value>
  </data>
  <data name="WRN_AttributeBindError" xml:space="preserve">
    <value>Couldn't bind attribute '{0}'. Either its arguments don't match any constructor or the type don't extend 'Attribute' class.</value>
  </data>
</root>