<#@ output extension=".tt.cs" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Runtime.InteropServices;
namespace Pchp.Core;



partial interface IPhpCallable
{
    /// <summary>
    /// Invokes the callback with no arguments.
    /// </summary>
    sealed PhpValue Invoke(Context ctx) => Invoke(ctx, ReadOnlySpan<PhpValue>.Empty);

    /// <summary>
    /// Invokes the callback with given argument.
    /// </summary>
    sealed PhpValue Invoke(Context ctx, PhpValue p0) => Invoke(ctx, MemoryMarshal.CreateReadOnlySpan(ref p0, 1));

<#

    for(int arity = 2; arity <= 16; arity++)
    {
#>
    

    /// <summary>
    /// Invokes the callback with given arguments.
    /// Uses ArrayPool to avoid allocation.
    /// </summary>
    sealed PhpValue Invoke(
        Context ctx,        
<# for(int p = 0; p < arity - 1; p++) { #>
        PhpValue p<#= p #>,
<# } #>
        PhpValue p<#= arity - 1 #>)
    {
        
        var tuple = new PhpArgTuple<#= arity #>
        {
<# for(int p = 0; p < arity; p++) { #>
            Argument<#= p #> = p<#= p #>,
<# } #>
        };
        var phpArgs = MemoryMarshal.CreateReadOnlySpan(ref tuple.Argument0, <#= arity #>);
        return Invoke(ctx, phpArgs);
    }

<#
    }

for (int arity = 2; arity <= 16; arity++)
{#>
    [StructLayout(LayoutKind.Sequential)]
    private struct PhpArgTuple<#= arity #>
    {  
<# for(int p = 0; p < arity; p++) { #>
        public PhpValue Argument<#= p #>;
<# } #>
    }
<#        
}
#>
}